/*
 * Copyright (c) 2020 John Mayfield
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

package com.simolecule.centres;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * From Blue Obelisk Data Repository.
 *
 * Note the source for this class is automatically generated.
 *
 * @see <a href="https://datahub.io/dataset/bodr">datahub.io</a>
 */
public enum Isotope {
  H(1, 0, 1.007941),
  H1(1, 1, 1.007825),
  H2(1, 2, 2.014102),
  He(2, 0, 4.002602),
  He3(2, 3, 3.016029),
  He4(2, 4, 4.002603),
  Li(3, 0, 6.940038),
  Li6(3, 6, 6.015123),
  Li7(3, 7, 7.016005),
  Be(4, 0, 9.012182),
  Be9(4, 9, 9.012182),
  B(5, 0, 10.811028),
  B10(5, 10, 10.012937),
  B11(5, 11, 11.009305),
  C(6, 0, 12.010736),
  C12(6, 12, 12.000000),
  C13(6, 13, 13.003355),
  N(7, 0, 14.006703),
  N14(7, 14, 14.003074),
  N15(7, 15, 15.000109),
  O(8, 0, 15.999405),
  O16(8, 16, 15.994915),
  O17(8, 17, 16.999132),
  O18(8, 18, 17.999161),
  F(9, 0, 18.998403),
  F19(9, 19, 18.998403),
  Ne(10, 0, 20.180046),
  Ne20(10, 20, 19.992440),
  Ne21(10, 21, 20.993847),
  Ne22(10, 22, 21.991385),
  Na(11, 0, 22.989769),
  Na23(11, 23, 22.989769),
  Mg(12, 0, 24.305052),
  Mg24(12, 24, 23.985042),
  Mg25(12, 25, 24.985837),
  Mg26(12, 26, 25.982593),
  Al(13, 0, 26.981539),
  Al27(13, 27, 26.981539),
  Si(14, 0, 28.085385),
  Si28(14, 28, 27.976927),
  Si29(14, 29, 28.976495),
  Si30(14, 30, 29.973770),
  P(15, 0, 30.973762),
  P31(15, 31, 30.973762),
  S(16, 0, 32.066085),
  S32(16, 32, 31.972071),
  S33(16, 33, 32.971459),
  S34(16, 34, 33.967867),
  S36(16, 36, 35.967081),
  Cl(17, 0, 35.452938),
  Cl35(17, 35, 34.968853),
  Cl37(17, 37, 36.965903),
  Ar(18, 0, 39.947677),
  Ar36(18, 36, 35.967545),
  Ar38(18, 38, 37.962732),
  Ar40(18, 40, 39.962383),
  K(19, 0, 39.098301),
  K39(19, 39, 38.963707),
  K40(19, 40, 39.963998),
  K41(19, 41, 40.961826),
  Ca(20, 0, 40.078023),
  Ca40(20, 40, 39.962591),
  Ca42(20, 42, 41.958618),
  Ca43(20, 43, 42.958767),
  Ca44(20, 44, 43.955482),
  Ca46(20, 46, 45.953693),
  Ca48(20, 48, 47.952534),
  Sc(21, 0, 44.955912),
  Sc45(21, 45, 44.955912),
  Ti(22, 0, 47.866749),
  Ti46(22, 46, 45.952632),
  Ti47(22, 47, 46.951763),
  Ti48(22, 48, 47.947946),
  Ti49(22, 49, 48.947870),
  Ti50(22, 50, 49.944791),
  V(23, 0, 50.941467),
  V50(23, 50, 49.947159),
  V51(23, 51, 50.943960),
  Cr(24, 0, 51.996133),
  Cr50(24, 50, 49.946044),
  Cr52(24, 52, 51.940508),
  Cr53(24, 53, 52.940649),
  Cr54(24, 54, 53.938880),
  Mn(25, 0, 54.938045),
  Mn55(25, 55, 54.938045),
  Fe(26, 0, 55.845146),
  Fe54(26, 54, 53.939611),
  Fe56(26, 56, 55.934938),
  Fe57(26, 57, 56.935394),
  Fe58(26, 58, 57.933276),
  Co(27, 0, 58.933195),
  Co59(27, 59, 58.933195),
  Ni(28, 0, 58.693352),
  Ni58(28, 58, 57.935343),
  Ni60(28, 60, 59.930786),
  Ni61(28, 61, 60.931056),
  Ni62(28, 62, 61.928345),
  Ni64(28, 64, 63.927966),
  Cu(29, 0, 63.545640),
  Cu63(29, 63, 62.929598),
  Cu65(29, 65, 64.927790),
  Zn(30, 0, 65.395563),
  Zn64(30, 64, 63.929142),
  Zn66(30, 66, 65.926033),
  Zn67(30, 67, 66.927127),
  Zn68(30, 68, 67.924844),
  Zn70(30, 70, 69.925319),
  Ga(31, 0, 69.723066),
  Ga69(31, 69, 68.925574),
  Ga71(31, 71, 70.924701),
  Ge(32, 0, 72.612758),
  Ge70(32, 70, 69.924247),
  Ge72(32, 72, 71.922076),
  Ge73(32, 73, 72.923459),
  Ge74(32, 74, 73.921178),
  Ge76(32, 76, 75.921403),
  As(33, 0, 74.921597),
  As75(33, 75, 74.921597),
  Se(34, 0, 78.959388),
  Se74(34, 74, 73.922476),
  Se76(34, 76, 75.919214),
  Se77(34, 77, 76.919914),
  Se78(34, 78, 77.917309),
  Se80(34, 80, 79.916521),
  Se82(34, 82, 81.916699),
  Br(35, 0, 79.903528),
  Br79(35, 79, 78.918337),
  Br81(35, 81, 80.916291),
  Kr(36, 0, 83.799325),
  Kr78(36, 78, 77.920365),
  Kr80(36, 80, 79.916379),
  Kr82(36, 82, 81.913484),
  Kr83(36, 83, 82.914136),
  Kr84(36, 84, 83.911507),
  Kr86(36, 86, 85.910611),
  Rb(37, 0, 85.467664),
  Rb85(37, 85, 84.911790),
  Rb87(37, 87, 86.909181),
  Sr(38, 0, 87.616644),
  Sr84(38, 84, 83.913425),
  Sr86(38, 86, 85.909260),
  Sr87(38, 87, 86.908877),
  Sr88(38, 88, 87.905612),
  Y(39, 0, 88.905848),
  Y89(39, 89, 88.905848),
  Zr(40, 0, 91.223648),
  Zr90(40, 90, 89.904704),
  Zr91(40, 91, 90.905646),
  Zr92(40, 92, 91.905041),
  Zr94(40, 94, 93.906315),
  Zr96(40, 96, 95.908273),
  Nb(41, 0, 92.906378),
  Nb93(41, 93, 92.906378),
  Mo(42, 0, 95.931292),
  Mo92(42, 92, 91.906811),
  Mo94(42, 94, 93.905088),
  Mo95(42, 95, 94.905842),
  Mo96(42, 96, 95.904680),
  Mo97(42, 97, 96.906022),
  Mo98(42, 98, 97.905408),
  Mo100(42, 100, 99.907477),
  Ru(44, 0, 101.064945),
  Ru96(44, 96, 95.907598),
  Ru98(44, 98, 97.905287),
  Ru99(44, 99, 98.905939),
  Ru100(44, 100, 99.904220),
  Ru101(44, 101, 100.905582),
  Ru102(44, 102, 101.904349),
  Ru104(44, 104, 103.905433),
  Rh(45, 0, 102.905504),
  Rh103(45, 103, 102.905504),
  Pd(46, 0, 106.415329),
  Pd102(46, 102, 101.905609),
  Pd104(46, 104, 103.904036),
  Pd105(46, 105, 104.905085),
  Pd106(46, 106, 105.903486),
  Pd108(46, 108, 107.903892),
  Pd110(46, 110, 109.905153),
  Ag(47, 0, 107.868151),
  Ag107(47, 107, 106.905097),
  Ag109(47, 109, 108.904752),
  Cd(48, 0, 112.411552),
  Cd106(48, 106, 105.906459),
  Cd108(48, 108, 107.904184),
  Cd110(48, 110, 109.903002),
  Cd111(48, 111, 110.904178),
  Cd112(48, 112, 111.902758),
  Cd113(48, 113, 112.904402),
  Cd114(48, 114, 113.903359),
  Cd116(48, 116, 115.904756),
  In(49, 0, 114.818086),
  In113(49, 113, 112.904058),
  In115(49, 115, 114.903878),
  Sn(50, 0, 118.710108),
  Sn112(50, 112, 111.904818),
  Sn114(50, 114, 113.902779),
  Sn115(50, 115, 114.903342),
  Sn116(50, 116, 115.901741),
  Sn117(50, 117, 116.902952),
  Sn118(50, 118, 117.901603),
  Sn119(50, 119, 118.903308),
  Sn120(50, 120, 119.902195),
  Sn122(50, 122, 121.903439),
  Sn124(50, 124, 123.905274),
  Sb(51, 0, 121.759786),
  Sb121(51, 121, 120.903816),
  Sb123(51, 123, 122.904214),
  Te(52, 0, 127.603128),
  Te120(52, 120, 119.904020),
  Te122(52, 122, 121.903044),
  Te123(52, 123, 122.904270),
  Te124(52, 124, 123.902818),
  Te125(52, 125, 124.904431),
  Te126(52, 126, 125.903312),
  Te128(52, 128, 127.904463),
  Te130(52, 130, 129.906224),
  I(53, 0, 126.904473),
  I127(53, 127, 126.904473),
  Xe(54, 0, 131.292481),
  Xe124(54, 124, 123.905893),
  Xe126(54, 126, 125.904274),
  Xe128(54, 128, 127.903531),
  Xe129(54, 129, 128.904779),
  Xe130(54, 130, 129.903508),
  Xe131(54, 131, 130.905082),
  Xe132(54, 132, 131.904154),
  Xe134(54, 134, 133.905395),
  Xe136(54, 136, 135.907219),
  Cs(55, 0, 132.905452),
  Cs133(55, 133, 132.905452),
  Ba(56, 0, 137.326892),
  Ba130(56, 130, 129.906321),
  Ba132(56, 132, 131.905061),
  Ba134(56, 134, 133.904508),
  Ba135(56, 135, 134.905689),
  Ba136(56, 136, 135.904576),
  Ba137(56, 137, 136.905827),
  Ba138(56, 138, 137.905247),
  La(57, 0, 138.905454),
  La138(57, 138, 137.907112),
  La139(57, 139, 138.906353),
  Ce(58, 0, 140.115726),
  Ce136(58, 136, 135.907172),
  Ce138(58, 138, 137.905991),
  Ce140(58, 140, 139.905439),
  Ce142(58, 142, 141.909244),
  Pr(59, 0, 140.907653),
  Pr141(59, 141, 140.907653),
  Nd(60, 0, 144.236131),
  Nd142(60, 142, 141.907723),
  Nd143(60, 143, 142.909814),
  Nd144(60, 144, 143.910087),
  Nd145(60, 145, 144.912574),
  Nd146(60, 146, 145.913117),
  Nd148(60, 148, 147.916893),
  Nd150(60, 150, 149.920891),
  Sm(62, 0, 150.366349),
  Sm144(62, 144, 143.911999),
  Sm147(62, 147, 146.914898),
  Sm148(62, 148, 147.914823),
  Sm149(62, 149, 148.917185),
  Sm150(62, 150, 149.917276),
  Sm152(62, 152, 151.919732),
  Sm154(62, 154, 153.922209),
  Eu(63, 0, 151.964370),
  Eu151(63, 151, 150.919850),
  Eu153(63, 153, 152.921230),
  Gd(64, 0, 157.252122),
  Gd152(64, 152, 151.919791),
  Gd154(64, 154, 153.920866),
  Gd155(64, 155, 154.922622),
  Gd156(64, 156, 155.922123),
  Gd157(64, 157, 156.923960),
  Gd158(64, 158, 157.924104),
  Gd160(64, 160, 159.927054),
  Tb(65, 0, 158.925347),
  Tb159(65, 159, 158.925347),
  Dy(66, 0, 162.497034),
  Dy156(66, 156, 155.924283),
  Dy158(66, 158, 157.924409),
  Dy160(66, 160, 159.925198),
  Dy161(66, 161, 160.926933),
  Dy162(66, 162, 161.926798),
  Dy163(66, 163, 162.928731),
  Dy164(66, 164, 163.929175),
  Ho(67, 0, 164.930322),
  Ho165(67, 165, 164.930322),
  Er(68, 0, 167.256304),
  Er162(68, 162, 161.928778),
  Er164(68, 164, 163.929200),
  Er166(68, 166, 165.930293),
  Er167(68, 167, 166.932048),
  Er168(68, 168, 167.932370),
  Er170(68, 170, 169.935464),
  Tm(69, 0, 168.934213),
  Tm169(69, 169, 168.934213),
  Yb(70, 0, 173.037696),
  Yb168(70, 168, 167.933897),
  Yb170(70, 170, 169.934762),
  Yb171(70, 171, 170.936326),
  Yb172(70, 172, 171.936382),
  Yb173(70, 173, 172.938211),
  Yb174(70, 174, 173.938862),
  Yb176(70, 176, 175.942572),
  Lu(71, 0, 174.966721),
  Lu175(71, 175, 174.940772),
  Lu176(71, 176, 175.942686),
  Hf(72, 0, 178.484972),
  Hf174(72, 174, 173.940046),
  Hf176(72, 176, 175.941409),
  Hf177(72, 177, 176.943221),
  Hf178(72, 178, 177.943699),
  Hf179(72, 179, 178.945816),
  Hf180(72, 180, 179.946550),
  Ta(73, 0, 180.947876),
  Ta180(73, 180, 179.947465),
  Ta181(73, 181, 180.947996),
  W(74, 0, 183.841778),
  W180(74, 180, 179.946704),
  W182(74, 182, 181.948204),
  W183(74, 183, 182.950223),
  W184(74, 184, 183.950931),
  W186(74, 186, 185.954364),
  Re(75, 0, 186.206707),
  Re185(75, 185, 184.952955),
  Re187(75, 187, 186.955753),
  Os(76, 0, 190.224863),
  Os184(76, 184, 183.952489),
  Os186(76, 186, 185.953838),
  Os187(76, 187, 186.955751),
  Os188(76, 188, 187.955838),
  Os189(76, 189, 188.958148),
  Os190(76, 190, 189.958447),
  Os192(76, 192, 191.961481),
  Ir(77, 0, 192.216056),
  Ir191(77, 191, 190.960594),
  Ir193(77, 193, 192.962926),
  Pt(78, 0, 195.077808),
  Pt190(78, 190, 189.959932),
  Pt192(78, 192, 191.961038),
  Pt194(78, 194, 193.962680),
  Pt195(78, 195, 194.964791),
  Pt196(78, 196, 195.964952),
  Pt198(78, 198, 197.967893),
  Au(79, 0, 196.966569),
  Au197(79, 197, 196.966569),
  Hg(80, 0, 200.599167),
  Hg196(80, 196, 195.965833),
  Hg198(80, 198, 197.966769),
  Hg199(80, 199, 198.968280),
  Hg200(80, 200, 199.968326),
  Hg201(80, 201, 200.970302),
  Hg202(80, 202, 201.970643),
  Hg204(80, 204, 203.973494),
  Tl(81, 0, 204.383332),
  Tl203(81, 203, 202.972344),
  Tl205(81, 205, 204.974428),
  Pb(82, 0, 207.216908),
  Pb204(82, 204, 203.973044),
  Pb206(82, 206, 205.974465),
  Pb207(82, 207, 206.975897),
  Pb208(82, 208, 207.976652),
  Bi(83, 0, 208.980399),
  Bi209(83, 209, 208.980399),
  Th(90, 0, 232.038055),
  Th232(90, 232, 232.038055),
  Pa(91, 0, 231.035884),
  Pa231(91, 231, 231.035884),
  U(92, 0, 238.028918),
  U234(92, 234, 234.040952),
  U235(92, 235, 235.043930),
  U238(92, 238, 238.050788);

  private final int    atomnum;
  private final int    massnum;
  private final double weight;

  private static final class Key {
    private final int atomnum;
    private final int massnum;

    public Key(int atomnum, int massnum) {
      this.atomnum = atomnum;
      this.massnum = massnum;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;
      Key key = (Key) o;
      return atomnum == key.atomnum && massnum == key.massnum;
    }

    @Override
    public int hashCode() {
      return Objects.hash(atomnum, massnum);
    }
  }

  private static final Map<Key,Isotope> map = new HashMap<>();

  static {
    for (Isotope isotope : values())
      map.put(new Key(isotope.atomnum, isotope.massnum), isotope);
  }

  Isotope(int atomnum, int massnum, double weight)
  {
    this.atomnum = atomnum;
    this.massnum = massnum;
    this.weight = weight;
  }

  public double getWeight() {
    return weight;
  }

  public static Isotope find(int atomnum, int massnum)
  {
    return map.get(new Key(atomnum, massnum));
  }
}
